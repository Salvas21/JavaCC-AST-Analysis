
/*
danson@grafidog.com: Modified to support Java 7:
- binary literals
- underscores in numeric literals
- strings in switch statements (no change needed)
- type inference for generic instance creation (no changes needed)
- improved compiler warnings and errors when using non-reifiable formal parameters with varargs methods (no changes needed)
- try with resources
- catching multiple exception types and rethrowing exceptions with improved type checking
    

Per Sreenivasa Viswanadha (as posted on the javacc user mailing list), the
original java 1.5 grammar is licensed under the BSD license, so this modified
grammar is also.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
    * Neither the name of the <ORGANIZATION> nor the names of its contributors
    may be used to endorse or promote products derived from this software without
    specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


options {
  JAVA_UNICODE_ESCAPE = true;
  //ERROR_REPORTING = true;
  STATIC = false;
  //DEBUG_PARSER = true;
  //DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(JavaParser)
package parser;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import helpers.MethodCalls;
import helpers.ClassMethodInfo;
import helpers.Storage;
import helpers.Variable;
import helpers.UmlGrapher;
import java.util.Stack;

public class JavaParser
{
	class VariableType
	{
		private int nbPublic = 0;
		private int nbPrivate = 0;
		private int nbProtected = 0;
		private int nbSimple = 0;
		private int nbObject = 0;
		private String classe = "";
		private String subClasse = "";
	
	  	public VariableType() { ; }

	  	public void addPublic(int add)
	  	{
	  	  nbPublic += add;
	  	}

	  	public void addPrivate(int add)
	  	{
	  	  nbPrivate += add;
	  	}

	  	public void addProtected(int add)
	  	{
	  	  nbProtected += add;
	  	}

	  	public void addSimple(int add)
	  	{
	  	  nbSimple += add;
	  	}

	  	public void addObject(int add)
	  	{
	  	  nbObject += add;
	  	}

	  	public void setClasse(String classe)
	  	{
	  	  this.classe = classe;
	  	}

	  	public void addSubClasse(String classe)
	  	{
	  	  if (subClasse != "")
	  	  {
	  	    subClasse += ",";
	  	  }
	  	  subClasse += classe;
	  	}

	  	public String toString()
	  	{
	  	  	int total = nbPublic + nbPrivate + nbProtected;
	  	  	String sc = "";

	  	  	if (subClasse != "")
	  	  	{
	  	  	  sc = "\n\nClasse avec visibilite permanente: " + subClasse;
	  	  	}
	  	  	
			return "\n****************************************\nCLASSE: " + classe
		    + "\nAttribut publique: \t" + String.format("%.1f",nbPublic * 100.0 / total) + "%\t (" + nbPublic + ")"
		    + "\nAttribut prive: \t" + String.format("%.1f",nbPrivate * 100.0 / total)  + "%\t (" + nbPrivate + ")"
		    + "\nAttribut protege: \t" + String.format("%.1f",nbProtected * 100.0 / total)  + "%\t (" + nbProtected + ")"
			+ "\n\nAttribut simple: \t" + String.format("%.1f",nbSimple * 100.0 / total)  + "%\t (" + nbSimple + ")"
			+ "\nAttribut objet: \t" + String.format("%.1f",nbObject * 100.0 / total)  + "%\t (" + nbObject + ")"
			+ sc + "\n****************************************";
		}
	}

   private InputStream inputStream = null;

   private static ArrayList<ClassMethodInfo> classMethodInfos = new ArrayList<ClassMethodInfo>();
   private static Stack<ClassMethodInfo> currentClassMethodInfo = new Stack<ClassMethodInfo>();
   private static Stack<MethodCalls> currentMethodCalls = new Stack<MethodCalls>();
   private static FileWriter resultFile;

   private static Storage storage = new Storage();
   private static String varClass = null;
   private static String varMethod = null;
   private static String varType = null;
   private static String varKey = null;

   private static String lastType = null;
   private static UmlGrapher grapher;
   private static Stack<UmlGrapher> graphStack;


    /**
     * Constructor for JavaParser.
     * @param filename name of the file to parse
     */
   public JavaParser(String filename)
   {
      this(System.in);
      try {
          inputStream = new FileInputStream(new File(filename));
          ReInit(inputStream);
      }
      catch(Exception e) {
        e.printStackTrace();
      }
   }

   public JavaParser(JavaCharStream stream) {
        jj_input_stream = stream;
        token_source = new JavaParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
   }


  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    Token t;
    t = getToken(1);
    if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
    return true;
  }

  // Main method for testing, here is a one-liner bash script that can be ran from
  // the command line:
  // for f in /some/directory/full/of/java/files/*.java; do java -cp . JavaParser $f; done
  public static void main(String args[]) {
    JavaParser parser = null;
    if (args.length == 0) {
      System.out.println("Java Parser Version 1.7:  Reading from standard input...");
      parser = new JavaParser(System.in);
    } else if (args.length == 1) {
      // ok keep going
    } else {
      System.out.println("Java Parser Version 1.7:  Usage is one of:");
      System.out.println("         java JavaParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JavaParser inputfile");
      return;
    }
    try {
        if (parser != null) {
              grapher = null;
              graphStack = new Stack<UmlGrapher>();
              parser.CompilationUnit();
              printMethodCallsResult();
        } else {
            parse(parser, args[0]);
        }

      System.out.println("Java Parser Version 1.7:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Java Parser Version 1.7:  Encountered errors during parse.");
    }
    
  }

  private static void parse(JavaParser parser, String path) throws ParseException {
      System.out.println("Java Parser Version 1.7:  Reading from file or directory " + path + "...");
        try {
            File file = new File(path);
            try {
                resultFile = new FileWriter("results.txt");
            } catch (Exception e) {

            }
            if (file.isDirectory()) {
                for (File childFile : file.listFiles()) {
                  System.out.println("Fichier : " + childFile.getName());
                    grapher = null;
                    graphStack = new Stack<UmlGrapher>();
                    parser = new JavaParser(new java.io.FileInputStream(childFile));
                    parser.CompilationUnit();
                }
            } else {
                grapher = null;
                graphStack = new Stack<UmlGrapher>();
                parser = new JavaParser(new java.io.FileInputStream(file));
                parser.CompilationUnit();
            }
            printMethodCallsResult();
        } catch (java.io.FileNotFoundException e) {
          System.out.println("Java Parser Version 1.7:  File " + path + " not found.");
          return;
        } catch (ParseException e) {
            throw e;
        }
        try {
            resultFile.close();
        } catch (Exception e) {

        }
  }

  private static void printMethodCallsResult() {
      try {
          resultFile.write("OBJECTIF 4 & 5" + "\n");
        resultFile.write("----------------------------------------\n");
      } catch (Exception e) {}
  	  for (var info : classMethodInfos) {
          info.print(resultFile);
      }
  }

  private static void startClassInfo(String name) {
      var info = new ClassMethodInfo();
      info.setName(name);
      currentClassMethodInfo.push(info);
      setVarClassName(name);
  }

  private static void startMethodCalls(String name) {
      if (currentClassMethodInfo.size() == 0) return;
      var calls = new MethodCalls();
      calls.setMethodName(name);
      currentMethodCalls.push(calls);
      setVarMethodName(name);
  }

  private static void addMethodCall(String type, String name) {
      if (currentMethodCalls.size() == 0) return;
      if (type.equals("this")) {
          // appel de methode a la classe elle meme
          type = varClass;
      } else if (type.equals("")) {
          // appel de methode en chaine donc a pas de type ex: .b().c()
          // peut determiner l'appel d'un premiere methode a l'aide du dernier type de reference trouv√©
          type = "?";
          if (lastType != null) {
            type = lastType;
            lastType = null;
          }
      } else {
          type = storage.getType(type);
      }

      currentMethodCalls.peek().addCallee(type + "." + name);
  }

  private static void endMethodCalls() {
      if (currentMethodCalls.size() == 0) return;
      storage.removeMethodVars(currentMethodCalls.peek().getMethodName());
      currentClassMethodInfo.peek().addCalls(currentMethodCalls.pop());
  }

  private static void endClassInfo() {
      if (currentClassMethodInfo.size() == 0) return;
      storage.removeClassVars(currentClassMethodInfo.peek().getName());
      classMethodInfos.add(currentClassMethodInfo.pop());
  }

  private static void addVariable(String className, String methodName, String type, String key) {
      storage.add(className, methodName, type, key);
  }

  private static void setVarClassName(String className) {
      varClass = className;
  }

  private static void setVarMethodName(String methodName) {
      varMethod = methodName;
  }

  private static void setVarType(String type) {
      varType = type;
  }

  private static void setVarKey(String key) {
       varKey = key;
  }

}

PARSER_END(JavaParser)



/********************************************
 * THE JAVA TOKEN SPECIFICATION STARTS HERE *
 ********************************************/

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  /* danson, added backup(2) for special handling of single line comments at
  the end of a file, see <IN_SINGLE_LINE_COMMENT> special token below */
  "//" { input_stream.backup(2); } : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  /* this is the original, I've replaced with the next line to allow a single
  line comment at the end of a java file without a new line following the
  comment.  The java language specification says that single line comments
  must be followed by an end-of-line marker (see section 3.4), so this new rule
  relaxes that requirement slightly by allowing the line terminator to be
  optional.  This only makes sense when the comment is the last line of the
  source file, all other single line comments will have a line terminator. This
  request was posted as a bug against JBrowse, I don't see any problem with
  allowing it, especially since Sun's compiler doesn't complain. */
  /* <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT */
  < SINGLE_LINE_COMMENT: "//"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */
// DONE: Java 7 allows a binary literal.
// DONE: Java 7 allows underscores in numeric literals to improve readability, e.g. 
// long creditCardNumber = 1234_5678_9012_3456L;
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <BINARY_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] ((["_"])*["0"-"9"])* >      // Java 7 allows underscores
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])((["_"])*["0"-"9","a"-"f","A"-"F"])* >      // Java 7 allows underscores
|
  < #BINARY_LITERAL: "0" ["b","B"] (["0"-"1"])((["_"])*["0"-"1"])* >   // new for Java 7, also allows underscores
|
  < #OCTAL_LITERAL: "0" ((["_"])*(["0"-"7"]))* >      // Java 7 allows underscores
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])((["_"])*(["0"-"9"]))* "." ((["0"-"9"])((["_"])*(["0"-"9"]))*)* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? ["f","F","d","D"]
  >
  
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < POINTER: "->" >
| < DIAMOND: "<>" >

}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
  }
| < GT: ">" >
}





/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/**
 * Main entry point for parsing java files.
 */
void CompilationUnit():
{
}
{
      (
          
           [ LOOKAHEAD(2) PackageDeclaration() ]
           ( ImportDeclaration() )*
           (
             TypeDeclaration()
           )*
           
           <EOF>
       )
}


void PackageDeclaration():
{
}
{
    
        <PACKAGE> Name() ";"  
}

void  ImportDeclaration():
{
}
{
    
        <IMPORT> [ <STATIC> ] Name() [ "." "*" ] ";"
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 * danson: the downside is this allows modifiers that aren't allowed
 * in some constructs. 
 * TODO: write productions for the actual modifiers allowed for each construct.
 */

Token Modifiers():
{
  Token m = null;
}
{
 (
   LOOKAHEAD(2)
   (
   m=<PUBLIC>
  |
   m=<STATIC>
  |
   m=<PROTECTED>
  |
   m=<PRIVATE> 
  |
   m=<FINAL>
  |
   m=<ABSTRACT>
  |
   m=<SYNCHRONIZED>
  |
   m=<NATIVE> 
  |
   m=<TRANSIENT>
  |
   m=<VOLATILE>
  |
   m=<STRICTFP>
  |
   Annotation()
  )
 )*
 { return m; }
}

/*
 * Declaration syntax follows.
 */

// Handle classes, interfaces, enums, and annotations.
void TypeDeclaration():
{
}
{
    

          ";"
        |
          Modifiers()
          (
              LOOKAHEAD(2)
             ClassOrInterfaceDeclaration()
           | 
             EnumDeclaration()
           | 
             AnnotationTypeDeclaration()
          )
}

void ClassOrInterfaceDeclaration():
{
}
{
	ClassOrInterfaceDeclaration2(null)
}

void ClassOrInterfaceDeclaration2(VariableType subVt):
{
  boolean hasClass = false;
	Token className;
  Token t = null;
  VariableType vt = new VariableType();
}
{
      ( 
          "class" {hasClass = true;} | "interface"
      )
      className=<IDENTIFIER>
      {
        if (hasClass) startClassInfo(className.toString());
        if (grapher != null) {
          graphStack.push(grapher);
      	}
      	grapher = new UmlGrapher(className.toString());
    	
      }
      {
      	vt.setClasse(className.toString());
      	if (subVt != null)
      	{
      	  subVt.addSubClasse(className.toString());
      	}
      }
      [ TypeParameters() ]
      [ ExtendsList() ]
      [ ImplementsList() ]
      ClassOrInterfaceBody2(vt)

      /* danson, added this check for trailing semi-colon.  Apparently, this has been
      legal since the beginning of Java, some sort of a C hold-over.  Sun's latest
      Java 1.5 compiler doesn't mind it, but this parser whined if the class has a
      semi-colon after the last }. */
      [ LOOKAHEAD(2) <SEMICOLON> ]

      {
		grapher.printResult(resultFile);
		if (!graphStack.isEmpty()) {
		  grapher = graphStack.pop();
	  	}
      }
}

void ExtendsList():
{
}
{
    

       "extends" {grapher.setExtendName(getToken(1).toString()); }ClassOrInterfaceType()
       ( "," ClassOrInterfaceType() )*

}

void ImplementsList():
{
}
{
    

        "implements" {grapher.addInterface(getToken(1).toString());}ClassOrInterfaceType()
       ( "," ClassOrInterfaceType() )*

}

void EnumDeclaration():
{
}
{
    
        "enum" <IDENTIFIER>
        [ ImplementsList() ]
        EnumBody()

}

void EnumBody():
{
}
{
    
        "{"
        EnumConstant() ( LOOKAHEAD(2) "," EnumConstant() )* [","]
        [ ";" ( ClassOrInterfaceBodyDeclaration() )* ]
        "}"
}

void EnumConstant():
{
}
{
    
        <IDENTIFIER> [ Arguments() ] [ ClassOrInterfaceBody() ]
}

void TypeParameters():
{
}
{
    
        (
            "<"
            (
            TypeParameter()
            )?
            (
                ","
                TypeParameter()
            )*
            ">"
        )
}

void TypeParameter():
{
}
{
    
        (
           <IDENTIFIER> [ TypeBound() ]
        )

}

void TypeBound():
{
}
{
    

        (
            "extends"
            ClassOrInterfaceType()
            (
                "&"
                ClassOrInterfaceType()
            )*
        )
}

void ClassOrInterfaceBody():
{
}
{
  ClassOrInterfaceBody2(null)
}

void ClassOrInterfaceBody2(VariableType vt):
{
}
{
        (
            "{"
            (
                ClassOrInterfaceBodyDeclaration2(vt)
            )*
            "}"
        )
        {endClassInfo();}

        {
          if (vt != null)
          {
              try {
                  resultFile.write(vt + "\n");
              } catch (Exception e) {}
          }
        }
}

void ClassOrInterfaceBodyDeclaration():
{
}
{
  ClassOrInterfaceBodyDeclaration2(null)
}

void ClassOrInterfaceBodyDeclaration2(VariableType vt):
{
  Token mod;
}
{
          (
          LOOKAHEAD(2)
          Initializer()
        |
          mod=Modifiers() // Just get all the modifiers out of the way. If you want to do
                      // more checks, pass the modifiers down to the member
          (
              LOOKAHEAD(3)
              ClassOrInterfaceDeclaration2(vt)
            |
              EnumDeclaration()
            |
              LOOKAHEAD( [ TypeParameters() ] <IDENTIFIER> "(" )
              ConstructorDeclaration()
            |
              LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
              FieldDeclaration2(vt, mod)
            |
              LOOKAHEAD(2)
              AnnotationTypeDeclaration()
            |
              MethodDeclaration()
          )
        |
          ";"  
          )
}

void FieldDeclaration():
{
}
{
	FieldDeclaration2(null, null)
}

void FieldDeclaration2(VariableType vt, Token mod):
{
  int nb = 0;
  Boolean estObject;
}
{
        (
            // Modifiers are already matched in the caller
            estObject = Type() VariableDeclarator() { nb++; }
            (
                "," VariableDeclarator() { nb++; }
            )*
            ";"
        )
        {
            if (vt != null)
            {
              	if (mod == null)
              	{
              	  	vt.addPublic(nb);
              	}
              	else
              	{
	                switch(mod.toString())
	                {
	                  case "public":
	                  case "":
	                  	vt.addPublic(nb);
	                  	break;
	                  case "private":
	                  	vt.addPrivate(nb);
	                  	break;
	                  case "protected":
	                  	vt.addProtected(nb);
	                  	break;
	                }
              	}

              	if (estObject)
              	{
              	  vt.addObject(nb);
              	}
              	else
              	{
              	  vt.addSimple(nb);
              	}
            }
        }
}

void VariableDeclarator():
{
}
{
    
        (
            VariableDeclaratorId(){addVariable(varClass, varMethod, varType, varKey);} [ "=" VariableInitializer() ]
        )
}

void VariableDeclaratorId():
{
 Token varId;
}
{
    
        varId=<IDENTIFIER>
        ( 
            "[" "]" 
        )*
        {setVarKey(varId.toString());}
}

void VariableInitializer():
{
}
{
    

          ArrayInitializer()
        |
          Expression()
}

void ArrayInitializer():
{
}
{
    

        "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"

}

void MethodDeclaration():
{
}
{
    
        (
          // Modifiers already matched in the caller!
          [ TypeParameters() ]
          ResultType()
          MethodDeclarator() [ "throws" NameList() ]
          ( Block() | ";" )
        )
        {endMethodCalls();}
}

void MethodDeclarator():
{
 Token methodName;
}
{
    
        (
            methodName=<IDENTIFIER> FormalParameters() ( "[" "]" )* {startMethodCalls(methodName.toString());}
        )
}

void FormalParameters():
{
}
{
    
        (
         "("
         [
              FormalParameter()
              (
                  ","
                  FormalParameter()
              )*
         ]
         ")"
        )
}

void FormalParameter():
{
}
{
    
      (
        Modifiers()
        Type()
       [
        <ELLIPSIS>  // ...
       ]
       VariableDeclaratorId()
      ) {addVariable(varClass, varMethod, varType, varKey);}
}

void ConstructorDeclaration():
{
 Token constructorName;
}
{
    
        (
            [ Annotation() ]
            [ TypeParameters() ]
            constructorName=<IDENTIFIER> FormalParameters() [ "throws" NameList() ] {startMethodCalls(constructorName.toString());}
            "{"
                [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
            ( BlockStatement() )*
            "}"
            {endMethodCalls();}
        )
}

void ExplicitConstructorInvocation():
{
}
{
    
          LOOKAHEAD("this" Arguments() ";")
          "this" Arguments() ";"
        |
        [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments() ";"
}

void Initializer():
{
}
{
    
        [ <STATIC> ] Block()
}

/*void Type():
{
}
{
	Type2(null)
}*/

Boolean Type()://VariableType vt):
{
  Boolean estObject = null;
}
{
        (
         LOOKAHEAD(2) ReferenceType() { estObject = true; } //{ if(vt != null) { vt.addObject(1); } }
        |
         PrimitiveType() { estObject = false; } //{ if(vt != null) { vt.addSimple(1); } }
        )
        { return estObject; }
}

void ReferenceType():
{
}
{
    
        (
            LOOKAHEAD(3)
            PrimitiveType() ( LOOKAHEAD(2) "[" "]" )+
        |
        ( ClassOrInterfaceType() ) ( LOOKAHEAD(2) "[" "]")*
        )
}

void ClassOrInterfaceType():
{
  Token type;
}
{
    
        (
          type=<IDENTIFIER> {grapher.addClass(type.toString());}[ LOOKAHEAD(2) TypeArguments() ]
          ( LOOKAHEAD(2) "." 
              <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments() ]
          )*
        ) {setVarType(type.toString()); lastType=type.toString();}
}

void TypeArguments():
{
}
{
    
        (
         <DIAMOND> 
        )
        |
        (
        "<" TypeArgument() 

        ( "," TypeArgument() )* ">"
        )
}

void TypeArgument():
{
}
{
    
        (
           ReferenceType()
         |
         "?" [ WildcardBounds() ]
        )
}

void WildcardBounds():
{
}
{
    
        (
        "extends" ReferenceType()
     |
        "super" ReferenceType() 
        )
}

void PrimitiveType():
{
 Token type;
}
{
    
        (
              type="boolean"
            |
              type="char"
            |
              type="byte"
            |
              type="short"
            |
              type="int"
            |
              type="long"
            |
              type="float"
            |
              type="double"
        ) {setVarType(type.toString());}
}

void ResultType():
{
}
{
    

          (
          "void"
        |
          Type()
          )
}

void Name():
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
	Token varName;
	Token methodName = null;
}
{
        varName=<IDENTIFIER>
        (
              LOOKAHEAD(2) "." methodName=<IDENTIFIER> [LOOKAHEAD("(") Arguments() {addMethodCall(varName.toString(), methodName.toString());}]
        )*
}

void NameList():
{
}
{
    
        Name() 
        ( "," Name() )*   
}


/*
 * Expression syntax follows.
 */

void Expression():
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{
}
{
    
          ConditionalExpression()
          [
            LOOKAHEAD(2)
            AssignmentOperator() Expression()
          ]
}

void AssignmentOperator():
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}

void ConditionalExpression():
{
}
{
    
        ConditionalOrExpression() [ "?" Expression() ":" Expression() ]
}

void ConditionalOrExpression():
{
}
{
    
        ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression():
{
}
{
    
        InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression():
{
}
{
    
        ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression():
{
}
{
    
        AndExpression() ( "^" AndExpression() )*
}

void AndExpression():
{
}
{
    
        EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression():
{
}
{
    
        InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*
}

void InstanceOfExpression():
{
}
{
    
        RelationalExpression() [ "instanceof" Type() ]
}

void RelationalExpression():
{
}
{
    
        ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression():
{
}
{
    
        AdditiveExpression() ( ( "<<" | RSIGNEDSHIFT() | RUNSIGNEDSHIFT() ) AdditiveExpression() )*
}

void AdditiveExpression():
{
}
{
    
        MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():
{
}
{
    
        UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression():
{
}
{
    
          ( "+" | "-" ) UnaryExpression()
        |
          PreIncrementExpression()
        | 
          PreDecrementExpression()
        | 
          UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression():
{
}
{
    
        "++" PrimaryExpression()
}

void PreDecrementExpression():
{
}
{
    
        "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus():
{
}
{
    
          ( "~" | "!" ) UnaryExpression()
        |
          LOOKAHEAD( CastLookahead() )
          CastExpression()
        |
          PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead():
{
}
{
    
          LOOKAHEAD(2)
          "(" PrimitiveType()
        |
          LOOKAHEAD("(" Type() "[")
          "(" Type() "[" "]"
        |
          "(" Type() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression():
{
}
{
    
        PrimaryExpression() [ "++" | "--" ]
}

void CastExpression():
{
}
{
    
          LOOKAHEAD("(" PrimitiveType())
          "(" Type() ")" UnaryExpression()
        |
          "(" Type() ")" UnaryExpressionNotPlusMinus()
}

/**
 * JLS 15.8 Primary Expressions
 * Primary expressions include most of the simplest kinds of expressions, from
 * which all others are constructed: literals, class literals, field accesses,
 * method invocations, and array accesses. A parenthesized expression is also
 * treated syntactically as a primary expression.
 */
void PrimaryExpression():
{
}
{
    
        PrimaryPrefix()
        ( LOOKAHEAD(2)
            PrimarySuffix()
        )*
}

void MemberSelector():
{
}
{
    
        "." TypeArguments() <IDENTIFIER>
}

void PrimaryPrefix():
{
 Token methodName;
}
{
    
          Literal()
        |
          LOOKAHEAD("this" "." <IDENTIFIER> "(") "this" "." methodName=<IDENTIFIER> Arguments() {addMethodCall("this", methodName.toString());}
        |
          "this"
        |
          "super" "." <IDENTIFIER>
        |
          LOOKAHEAD( ClassOrInterfaceType() "." <IDENTIFIER> )
          ClassOrInterfaceType()"." <IDENTIFIER>
        |
          LOOKAHEAD( ClassOrInterfaceType() "." "super" "." <IDENTIFIER> )
          ClassOrInterfaceType() "." "super" "." <IDENTIFIER>
        |
            "(" Expression() ")"
        |
            AllocationExpression() 
        |
          LOOKAHEAD( ResultType() "." "class" )
          ResultType() "." "class"
        |
          LOOKAHEAD(<IDENTIFIER> "(") methodName=<IDENTIFIER> Arguments() {addMethodCall("this", methodName.toString());}
        |
          Name()
}

void PrimarySuffix():
{
    Token attribute;
	Token weirdMethod;
}
{
    
          LOOKAHEAD(2)
          "." "this"
        |
          LOOKAHEAD(2)
          "." AllocationExpression()
        |
          LOOKAHEAD(3)
          MemberSelector()
        |
          "[" Expression() "]"
        |
          LOOKAHEAD( "." <IDENTIFIER> "." <IDENTIFIER> "(" ) "." attribute=<IDENTIFIER> "." weirdMethod=<IDENTIFIER> Arguments() {addMethodCall(attribute.toString(), weirdMethod.toString());}
        |
          LOOKAHEAD( "." <IDENTIFIER> "(" ) "." weirdMethod=<IDENTIFIER> Arguments() {addMethodCall("", weirdMethod.toString());}
        |
          "." <IDENTIFIER>
        |
          Arguments()
}

void Literal():
{}
{
    
          <INTEGER_LITERAL>
        |
          <FLOATING_POINT_LITERAL>
        |
          <CHARACTER_LITERAL>
        |
          <STRING_LITERAL>
        |
          BooleanLiteral()
        |
          NullLiteral()
}

void BooleanLiteral():
{}
{
  "true"
|
  "false"
}

void NullLiteral():
{}
{
  "null"
}

void Arguments():
{
}
{
    
        "(" [ ArgumentList() ] ")"
}

void ArgumentList():
{
}
{
    
        Expression() ( "," Expression() )*
}

void AllocationExpression():
{
}
{
    
          LOOKAHEAD(2)
          "new" PrimitiveType() ArrayDimsAndInits() 
        |
          "new" ClassOrInterfaceType() [ TypeArguments() ]
            (
                ArrayDimsAndInits() 
            |
                Arguments() [ ClassOrInterfaceBody() ]
            )
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits():
{
}
{
    
          LOOKAHEAD(2)
          ( LOOKAHEAD(2) "["  Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
        |
          ( "[" "]" )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */

void Statement():
{
}
{
    
          (
          LOOKAHEAD(2)
          LabeledStatement()
        |
          AssertStatement()
        |
          Block()
        |
          EmptyStatement()
        |
          StatementExpression() ";"
        |
          SwitchStatement()
        |
          IfStatement()
        |
          WhileStatement()
        |
          DoStatement()
        |
          ForStatement()
        |
          BreakStatement()
        |
          ContinueStatement()
        |
          ReturnStatement()
        |
          ThrowStatement()
        |
          SynchronizedStatement()
        |
          TryStatement()
          )

}

void AssertStatement():
{}
{
    
        "assert" Expression() [ ":" Expression() ] ";"
}

void LabeledStatement():
{}
{
    
        <IDENTIFIER> ":" Statement()
}

void Block():
{
}
{
    
        "{" ( BlockStatement() )* "}"
}

void BlockStatement():
{
}
{
    
        [LOOKAHEAD(2) Annotation()]
            (
          LOOKAHEAD( Modifiers() Type() <IDENTIFIER>)
          LocalVariableDeclaration() ";"
        |
          LOOKAHEAD(3)
          Statement()
        |
          ClassOrInterfaceDeclaration()
             )
}

void LocalVariableDeclaration():
{
}
{
    
      // old -- [ "final" ] Type() VariableDeclarator() ( "," VariableDeclarator() )*
      // new -- Modifiers() Type() VariableDeclarator() ( "," VariableDeclarator() )*

      [LOOKAHEAD(2) Annotation()] Modifiers() Type() VariableDeclarator()
      ( "," VariableDeclarator()
      )*
}

void EmptyStatement():
{}
{
  ";"
}

void StatementExpression():
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{
}
{
    
          PreIncrementExpression()
        |
          PreDecrementExpression()
        |
          PrimaryExpression()
          [
            "++"
          |
            "--"
          |
            AssignmentOperator() Expression()
          ]
}

void SwitchStatement():
{
}
{
    
        "switch" "(" Expression() ")" "{"
            ( SwitchLabel() ( BlockStatement() )* )*
      "}"

}

void SwitchLabel():
{
}
{
    
          "case" Expression() ":"
        |
          "default" ":"
}

void IfStatement():
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
}
{
    
        "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]

}

void WhileStatement():
{
}
{
    
        "while" "(" Expression() ")" Statement()
}

void DoStatement():
{
}
{
    
        "do" Statement() "while" "(" Expression() ")" ";"

}

void ForStatement():
{
}
{
    
      "for" "("

      (
          LOOKAHEAD([Annotation()]["final"] Type() <IDENTIFIER> ":")
          [LOOKAHEAD(2) Annotation()]["final"] Type() <IDENTIFIER> ":" Expression()
        |
         [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ]
      )

      ")" Statement()

}

// TODO: what is this? It doesn't appear to be called from anywhere. It's in the
// JLS, but not used, rather, all modifiers are captured in the Modifiers production.
void VariableModifier() :
{}
{
    [LOOKAHEAD(2) Annotation()] ["final"]   
}

void ForInit():
{
}
{
    
          LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
          LocalVariableDeclaration() 
        |
        StatementExpressionList() 
}

void StatementExpressionList():
{
}
{
    
        StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate():
{}
{
    
        StatementExpressionList()
}

void BreakStatement():
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement():
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

void ReturnStatement():
{
}
{
    
        "return" [ Expression() ] ";"
}

void ThrowStatement():
{
}
{
    
        "throw" Expression() ";"
}

void SynchronizedStatement():
{
}
{
    
        <SYNCHRONIZED> "(" Expression() ")" Block()

}

void TryStatement():
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
 // DONE: Java 7 allows try with resources, where the resource implements Closeable.
 // e.g.
 // try (BufferedReader br = new BufferedReader(new FileReader(path))) {
 //   return br.readLine();
 // }
 // Note that neither 'catch' nor 'finally' are required in this case.
 //
 // DONE: Java 7 allows 'catch' to handle more than one exception type, e.g.
 // catch (IOException|SQLException ex)
{
}
{
    
        "try" ["(" LocalVariableDeclaration()(LOOKAHEAD(2) ";" LocalVariableDeclaration())* [";"] ")"]
        Block() 
        ( "catch" "(" 
                        (
                            LOOKAHEAD(3)
                            FormalParameter() 
                            |
                            ClassOrInterfaceType()(LOOKAHEAD(2) "|" ClassOrInterfaceType())+ VariableDeclaratorId()
                        )
                  ")" 
            Block()
        )*
        
        [ "finally" 
            Block()
        ]
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */

void RUNSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                 getToken(1) instanceof Token.GTToken &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT} )
   ">" ">" ">"
  )
}

void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                 getToken(1) instanceof Token.GTToken &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT} )
  ">" ">"
  )
}

/* Annotation syntax follows. */

void Annotation():
{
}
{
    
   LOOKAHEAD( "@" Name() "(" ( <IDENTIFIER> "=" | ")" ))
   NormalAnnotation()
 |
   LOOKAHEAD( "@" Name() "(" )
   SingleMemberAnnotation()
 |
   MarkerAnnotation()
}

void NormalAnnotation():
{
}
{
    
        "@" Name() "(" [ MemberValuePairs() ] ")"
}

void MarkerAnnotation():
{
}
{
    
        "@" Name()
}

void SingleMemberAnnotation():
{
}
{
    
        "@" Name() "(" MemberValue() ")"
}

void MemberValuePairs():
{
}
{
    
    MemberValuePair() ( "," MemberValuePair() )*
}

void MemberValuePair():
{
}
{
    
    <IDENTIFIER> "=" MemberValue()
}

void MemberValue():
{
}
{
    
           LOOKAHEAD(2)
           Annotation()      
         |
           MemberValueArrayInitializer()
         |
           ConditionalExpression()
}

void  MemberValueArrayInitializer():
{
}
{
    
    "{" (MemberValue() ( LOOKAHEAD(2) "," MemberValue() )* [ "," ])? "}"
}


/* Annotation Types. */

void AnnotationTypeDeclaration():
{
}
{
    
        "@" "interface" <IDENTIFIER> AnnotationTypeBody()
}

void AnnotationTypeBody():
{
}
{
    
    "{" ( AnnotationTypeMemberDeclaration() )* "}"
}

void AnnotationTypeMemberDeclaration():
{
}
{
 Modifiers()
 
     (
         LOOKAHEAD(Type() <IDENTIFIER> "(")
         Type() <IDENTIFIER> "(" ")" [ DefaultValue() ] ";" 
         |
         LOOKAHEAD(3)
         ClassOrInterfaceDeclaration()
         |
         EnumDeclaration()
         |
         LOOKAHEAD(2)
         AnnotationTypeDeclaration()
         |
         FieldDeclaration()
     )
     |
     ( ";" )
}

void DefaultValue():
{
}
{
    
        "default" MemberValue()
}

